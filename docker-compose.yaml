services:
  postgres:
    image: 'postgres:latest'
    container_name: postgres
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=myuser
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistencia de datos
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

  flyway:
    image: flyway/flyway:latest
    container_name: flyway
    depends_on:
      postgres:
        condition: service_healthy
    command: -url=jdbc:postgresql://postgres:5432/mydatabase -user=myuser -password=secret migrate
    volumes:
      - ./src/main/resources/db/migration:/flyway/sql
    networks:
      - mynetwork

  redis:
    image: 'redis:latest'
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - mynetwork

  mockserver:
    image: mockserver/mockserver
    container_name: mockserver
    ports:
      - "1080:1080"
    environment:
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/mockserver.json
    volumes:
      - ./mockserver:/config  # Configuraci√≥n de MockServer
    networks:
      - mynetwork

  app:
    image: cbarrosc/challenge-app:latest
    container_name: challenge-app
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=secret
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MOCKSERVER_BASE_URL=http://mockserver:1080
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
